<MotionScene xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto">

    <Transition
        android:id="@+id/front_scene"
        app:constraintSetEnd="@id/end"
        app:constraintSetStart="@id/start"
        app:duration="5000">

        <!-- https://blog.csdn.net/xgxmwang/article/details/100704423 -->
        <KeyFrameSet>

            <!-- KeyPosition 位置关键帧
             motionTarget：关键帧使用的小部件
             framePosition：从0-100，关键帧何时使用

             keyPositionType：使用的坐标系类型
                parentRelative：MotionLayout的父布局区域范围
                deltaRelative：start和end位置为对角线的矩形区域范围
                pathRelative：相对于起始状态和结束状态之间的直线路径
             percentX、percentY：位置的(x,y)坐标，其含义取决与坐标系的类型，值为百分比

             pathMotionArc：弧形运动
                startHorizontal：弧度左上运行
                startVertical：弧度右上运行
                flip：使用与当前弧形运动类型相反的方式
                none：恢复为线性运动

             transitionEasing：缓动曲线
                standard：标准
                accelerate：加速
                decelerate：减速
            -->

            <!--            <KeyPosition-->
            <!--                app:framePosition="50"-->
            <!--                app:keyPositionType="parentRelative"-->
            <!--                app:motionTarget="@+id/motion_from_view"-->
            <!--                app:pathMotionArc="startHorizontal"-->
            <!--                app:percentX="0.5"-->
            <!--                app:percentY="0.5" />-->

            <!-- KeyAttribute 属性关键帧

             motionTarget：关键帧使用的小部件
             framePosition：从0-100，关键帧何时使用
             其属性类型：
             alpha：
             visibility：
             elevation：

             rotation：
             rotationX：
             rotationY：

             translationX：
             translationY：
             translationZ：

             scaleX
             scaleY

            <KeyAttribute
                android:alpha="1.0"
                android:rotation="-180"
                android:scaleX="1.2"
                android:scaleY="1.2"
                app:framePosition="50"
                app:motionTarget="@+id/motion_from_view" />

 -->
            <!-- KeyCycle 循环关键帧
            wavePeriod：这个表示在当前场景位置下需要执行动画的波（周期）的数量
            waveOffset：表示当前控件需要变化的属性的偏移量，即 view properties 所对应的初始值或者基准值。
                例如，如果我们在动画执行的某个位置设置了 scaleX 为 0.3，而设置了 waveOffset 值为 1，
                那么，动画执行到该位置，控件的实际宽度会变为 1 + 0.3 = 1.3，也就是会扩大为 1.3 倍，而不是缩小为之前的 0.3 倍。

            waveShape：这个属性比较好理解，即波的形状，常见的值有：sin、cos、sawtooth 等
            -->
            <KeyCycle
                android:scaleX="0.3"
                app:framePosition="50"
                app:motionTarget="@+id/motion_from_view"
                app:waveOffset="1"
                app:wavePeriod="4"
                app:waveShape="sin" />


            <!--            <KeyCycle-->
            <!--                android:translationY="50dp"-->
            <!--                app:framePosition="0"-->
            <!--                app:motionTarget="@id/motion_from_view"-->
            <!--                app:waveOffset="0"-->
            <!--                app:wavePeriod="0"-->
            <!--                app:waveShape="sin" />            -->
        </KeyFrameSet>
    </Transition>

    <!-- 启始位置 -->
    <ConstraintSet
        android:id="@+id/start"
        app:pathMotionArc="startHorizontal">
        <!--        app:transitionEasing="standard"-->

        <!-- 指定需要运动的view的启始位置。通过id，与layout中的具体view绑定
         android:alpha="1.0" 清晰度由 1.0 => 0.0
         -->
        <Constraint
            android:id="@+id/motion_from_view"
            android:layout_width="504dp"
            android:layout_height="265dp"
            android:layout_marginTop="150dp"
            android:layout_marginEnd="20dp"
            app:layout_constraintRight_toRightOf="parent"
            app:layout_constraintTop_toTopOf="parent">

            <!-- CustomAttribute
            指定view的属性，需要在开始和结束的ConstraintSet中定义它
            通过attributeName指定属性，实现对象的getter/setter方法：
            app:attributeName="backgroundColor" 对应对象的getBackgroundColor和setBackgroundColor

            指定属性的同时，还需要指定属性值的类型，比如：
            customColorValue
            customIntegerValue
            customFloatValue
            customStringValue
            customDimension
            customBoolean
            -->
            <!--            <CustomAttribute-->
            <!--                app:attributeName="backgroundColor"-->
            <!--                app:customColorValue="#ff9999" />-->

        </Constraint>
    </ConstraintSet>

    <ConstraintSet
        android:id="@+id/end"
        app:deriveConstraintsFrom="@id/start">
        <!--        app:transitionEasing="accelerate"-->
        <Constraint
            android:id="@+id/motion_from_view"
            android:layout_width="1dp"
            android:layout_height="1dp"
            android:layout_marginStart="531dp"
            app:layout_constraintLeft_toLeftOf="parent"
            app:layout_constraintTop_toTopOf="parent">
            <!--            <CustomAttribute-->
            <!--                app:attributeName="backgroundColor"-->
            <!--                app:customColorValue="#9999ff" />-->

        </Constraint>
    </ConstraintSet>

</MotionScene>