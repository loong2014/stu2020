plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
}

android {
    compileSdkVersion 29
    buildToolsVersion "$build_tools_version"

    defaultConfig {
        minSdkVersion "$sdk_version_min"
        targetSdkVersion 29 // 项目运行的目标版本，系统将为你解锁目标版本的新特效

        applicationId "com.sunny.app"

        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    // 基础组件，使用api进行依赖，这样可以直接调用common组件里的代码
    api project(path: ':libCommon')

    // 功能组件，使用runtimeOnly进行依赖，实现组件之间的代码隔离，但不能隔离资源的直接使用
    // 要隔绝资源引用需要在组件的build.gradle中resourcePrefix来固定这个modoule中的资源前缀
    // but，resourcePrefix只能限定 res 中 xml 文件中定义的资源，并不能对图片，layout中的xml名字进行限制
    if (!isModuleHomeAlone.toBoolean()) {
        runtimeOnly project(path: ':moduleHome')
    }

    if (!isModuleAccountAlone.toBoolean()) {
        runtimeOnly project(path: ':moduleAccount')
    }

    if (!isModuleViewAlone.toBoolean()) {
        runtimeOnly project(path: ':moduleView')
    }

    if (!isModuleWebAlone.toBoolean()) {
        runtimeOnly project(path: ':moduleWeb')
    }
}