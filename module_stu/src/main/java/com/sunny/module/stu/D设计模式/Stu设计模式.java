package com.sunny.module.stu.D设计模式;

import com.sunny.module.stu.base.StuImpl;

public class Stu设计模式 extends StuImpl {
    @Override
    public void a_是什么() {
        /*
        设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。
        设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。
        这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。

        设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。
        使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。
        毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。
        项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，
        每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因
         */
    }

    @Override
    public void c_功能() {
        // 创建型设计模式
        /*
            用户创建对象

            单例模式
            工厂模式
            原型模式
            代理模式

         */

        // 结构型设计模式
        /*
            关注类和对象的组合

            适配器模式
            构建模式
            筹备模式

         */

        // 行为型设计模式
        /*
            关注对象之间的通信

            观察者模式
            责任链模式
            备忘录模式

         */
    }
}
