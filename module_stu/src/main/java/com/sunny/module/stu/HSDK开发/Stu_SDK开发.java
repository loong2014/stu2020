package com.sunny.module.stu.HSDK开发;

import com.sunny.module.stu.base.StuImpl;

/**
 * https://zhuanlan.zhihu.com/p/113505249
 * <p>
 * https://www.jianshu.com/p/5578132d28bb
 */
public class Stu_SDK开发 extends StuImpl {
    @Override
    public void a_是什么() {
        /*
            所谓 SDK 就是一个开发工具包，全称是 Software Development Kit，翻译过来是软件开发工具包。
            SDK 通常是为辅助开发某类软件而编写的特定软件包。

        App 开发与 SDK 开发的工作有什么区别呢？
            App 开发更偏向于用户层面，从 UI 展示到业务逻辑处理，全程处理用户的行为。
            而 SDK 开发更偏向于功能方面，注重功能的开发实现，轻 UI。
         */
    }

    private void SDK设计原则() {

        // 核心原则
        /*
        核心原则：一定要稳定，不能引起客户 App 的崩溃。
            由于我们的 SDK 是服务于 2B 行业，所以会有很多 App 集成我们的 SDK，这就要求 SDK 的核心原则不能引起客户 App 的崩溃。
            一旦 SDK 的出现引起崩溃的 bug，这将对众多 App 造成灾难性的影响，如果出现这种情况，是非常致命的。
            所以对于 Android SDK 开发来说，要注意 try...catch 的使用、对象的检查等等。
         */

        // 设计原则
        /*
            首先需要明确，一方面，SDK 的价值是给调用者带来价值。所以要努力降低用户的上手难度，易于理解。
                另一方面要时 SDK 代码易于维护。

            1、接口易用性：
                注意控制接口的数量
                做 App 开发时，我也抱怨过XX 的 SDK 真难用。一个 SDK 好不好用，关键就看接口的设计是否简单易用，
                    对于接入方来说他不会关注你的实现细节，能用一个 API 接口搞定的业务，坚决不用两个。

                注意接口的命名
                一个好的 API 接口的命名能够让调用者见名思意，做到不需要借助帮助文档就能使用的程度就说明这个接口命名是成功的。
                比如对于 Android 中设置点击事件的接口 setOnClickListener。

            2、命名规范要统一
                对于 SDK 开发来说，统一命名规范很重要，最好的状态是**接入方看到接口命名就能知道是哪家厂商的 SDK。**
                    换句话说就是 SDK 的命名规范统一，形成自己公司的品牌效应。同时也方便接入方使用。

                对于编码规范，网上都有各个大厂的规范模板，可以选择其中一个或自定义自己团队的规范，尽早统一代码风格。

            3、跨端接口尽量保持一致
                对于同一套 SDK，尽量保持各端接口命名、实现逻辑要一致。在我们的开发过程中，
                也出现由于跨端之间的逻辑有差异导致客户在 Android 和 iOS 上体验不一致的问题，同时也会带来额外的支持工作。
                所以对于涉及到多个端的需求设计，一定要进行详细的沟通和确认，防止出现接口命名和实现不一致的情况。

            4、尽量不依赖第三方库
                随着开源的普及，GitHub 上有很多经典的开源项目供开发者使用。
                对于 App 开发者，会经常使用到开源项目，比如网络请求 OkHttp、图片加载 Glide 等等。
                但是在 SDK 的开发中，一般的原则是尽量避免使用开源项目库。主要有以下几点原因：
                    1、为了避免与调用方由于使用相同的库引起的冲突，增加调用方集成的工作量，降低集成方的体验。
                    2、开源库的不断更新，所以 SDK 需要及时保持更新，会增加额外的维护的工作量。
                    3、由于引入开源库，出现问题排查困难。

            5、SDK 包尽量小
                SDK 包一定要小而精。
                    小是指包的体积要尽可能的小
                        避免造成接入方的 App 增加很大，不然会引起接入方的不满，甚至下架。
                    精是指功能要专注
                        比如我们的 SDK 是用于埋点的，那里面设计提供很多常见的工具类显然是不合适的。

            6、兼容性
                兼容性是每个开发者都会遇到的问题。在 SDK 开发中更要保证新版本对于旧版本的兼容。
                    常见的兼容性问题分为两类。
                1、新老接口兼容
                    一般出现接口兼容性的问题主要是由于最初需求考虑不完善，导致后面进行方案优化时引起接口的变更，
                    使之前的接口成为历史的老大难问题，最终造成删除难度大。

                2、新功能兼容性
                    这里的兼容性问题分为两个方面：
                        接入新功能的 App
                        未接入新功能的 App

                    举个例子，当初我们 SDK 适配 OAID 的方案时，由于需要使用 MSA 提供的集成包才能获取，
                    但是在 SDK 中一般是不轻易集成一个第三方的库，所以在设计这个方案时，就需要让接入方自己集成库，SDK 中提供获取的代码逻辑。
                    确定开发方案时，就需要考虑到
                        一部分接入方使用了该功能，需要保证该功能正常读取。
                        一部分接入方没有使用到该功能，要确保无异常出现。
                    一般这种兼容性问题会决定开发方案的技术实现。

            7、集成与维护
                1、SDK 集成
                集成方式要多样同时灵活方便。
                比如对于 Android 来说，我们提供通过 maven、gradle 依赖引入等方式，也是推荐的集成方式。
                但是对于一些接入方由于网络的限制，无法直接依赖 maven，这里就需要提供 aar 包或源码来集成。

                2、集成指南
                对于 SDK 的集成和使用，以及版本更新内容和 API 接口介绍，一定要准备比较完善的用户接入指南。
                比如我们的 SDK 接入指南分为：
                    基本使用
                    常见问题
                    高级应用
                    插件配置
                    ......
                尽管根据经验来看，有些开发者没有看文档的习惯，但是一份完整的指导文档还是非常有必要，它可以节省很多集成的成本和时间。

                同时文档要注意合理的规划设计，避免一份文档内容太多，造成阅读困难。对于使用性的部分，最好有示例代码进行展示。

                3、完备的测试报告
                在实际的接入过程中，有很多接入方需要提供相关的性能测试说明，这部分的内容需要及早准备。
                测试报告的工作可以研发和测试一起协助进行输出，最终方便后续的支持工作，降低维护成本。
         */

        // 开发经验
        /*
        1、不做想太多需求
            在最初开发 SDK 时，经常会由客户的一个简单需求扩展很多需求，导致最终增加了多个接口，
                尽管看似 SDK 非常灵活，但是多出来的接口增加了很多维护成本。

            曾经我们做过一个开启 Fragment 名称采集的需求，客户提出的需求是通过文件配置，然后 SDK 进行读取。
                在实施的过程中就出现很多想太多。
                如果有别的客户不想通过配置文件，想使用接口怎么办？
                如果用户想删除配置文件中已配置项怎么办？
                如果客户想恢复忽略的配置怎么办？
            这些想太多的需求，会增加很多额外的工作和交付成本，所以在 SDK 开发中一定要避免想太多的需求。

        2、配置项不提倡提供读取方法
            在 SDK 中经常会有很多初始化开关配置接口，这类接口一般是暴露 set 方法让用户去设置，常见在初始化一次性配置，
            所以这类配置项一般就不需要提供 get 方法，防止接口太多。

         */
    }

    @Override
    public void l_限制() {
        // 资源名称不可与宿主一样，因此在gradle中需要如下配置，约束sdk中的资源命名规范
        /*
            resourcePrefix "filter_"
         */
    }

    private void 选择方案() {
        // jar or arr
    }

    private void SDK中三方库() {
        //
        /*
        首先建议开发sdk尽量少使用第三方库，使用时问题很多！但是特定情况下需要必须使用咋办？
            例如用到网络请求等等第三方库，例如现在的okhttp已经非常成熟，我们一般选择他来作为网络请求！首先我们抛出问题

        1、假如我们在sdk中的build.gradle中加入依赖，开发完毕后直接打包，这里会出现一个问题就是
            打出来的包里面并不包含第三方库，会出现类找不到的情况，
            这个时候需要第三方开发者自己来导入我们sdk中所需要的依赖，假如我们不提供文档，开发者们都不知道要导入哪些？

        2、我们使用arr打包方式，将我们用到的第三方库下载下来放进libs里面然后打包，
            这样可以打出来的包可以把第三方库打包进去使用！
            但是这样又会出现一个问题就是第三方开发者经常会遇到包冲突现象！


         */
    }
}
